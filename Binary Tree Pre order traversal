/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> values=new ArrayList<Integer>();
        Stack<TreeNode> stack=new Stack<TreeNode>();
        
        if(root==null)
        {
            return values;
        }
        
        stack.push(root);
          
        while(!stack.isEmpty())
        {
            TreeNode current=stack.pop();
            values.add(current.val);
            
        /* Here we will put right node first and then left node cause if a node had both left and right children the both of the 
        below statements would be executed (which means stack would be loaded twice, so , since we want the left value to be 
        popped out first(and placed in arraylist values), we will load the right child first into the stack and then left child*/
         
            if(current.right!=null)
            {
                stack.push(current.right);
            }
             if(current.left!=null)
             {
                 stack.push(current.left);
             }
            
        }
        return values;
    }
}
