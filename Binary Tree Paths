/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
         List<String> result = new ArrayList<String>();
         if(root==null)
         {
             return null;
         }
       String CurrPath = Integer.toString(root.val);
       if(root.left==null && root.right==null)
       {
           result.add(CurrPath);
       }
        if(root.left!=null)
        {
            dfs(root.left, CurrPath, result);
        }
        if(root.right!=null)
        {
            dfs(root.right, CurrPath, result);
        }
        return result;
    }
    
    public void dfs(TreeNode node, String CurrPath, List<String> result)
    {
        CurrPath+="->"+ node.val;
        
        if(node.left==null && node.right==null)
        {
            result.add(CurrPath);
            return;
        }
        
        if(node.left!=null)
        {
           dfs(node.left, CurrPath, result); 
        }
        if(node.right!=null)
        {
             dfs(node.right, CurrPath, result); 
        }
    }
}
