/* We will use binary search to solve this question. We'll calculate mid and pass that to guess function. Depending upon the value returned by gues function(0,1 or -1), we will update mid */

/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is lower than the guess number
 *			      1 if num is higher than the guess number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        
        int left=1;
        int right=n;
        
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            int res=guess(mid);
            if(res==0) return mid;
                else if(res==-1) right=mid-1;
            else 
                left=mid+1;
        }
        
     return -1;
    }
}
