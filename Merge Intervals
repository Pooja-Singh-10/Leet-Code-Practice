 /*
    
    Algorithm
    1. Take a list of arrays "outputArr" (it would be later converted to array)
    2. Sort the array and compare it.
    3. Store the first element of the variable in an array(say currElement)
    and store it in outputArr
    4. Traverse through intervals array and check whether the value at 1st position of 1st element is greater than the value at 0th position of second element.
    5. if so, update the 1st position of the element in outputArr with the max value.
    6. if not, asign the next element of the intervals array to the current element and assign current element to outpurArr
    
    */

class Solution {
    public int[][] merge(int[][] intervals) {
        
        if(intervals.length<=1)
        {
            return intervals;
        }
        Arrays.sort(intervals, (arr1,arr2)->Integer.compare(arr1[0],arr2[0])); // We are looping through current array(arr1) and next array(arr2) of intervals and we will sort based in the first element of both the arrays. Basically, 1st element of the first array must be lesser that the first element of second array.
        List<int[]> outputArr = new ArrayList<>();
        int[] currElement = intervals[0];
        outputArr.add(currElement);
        
        for(int[] i : intervals)
        {
            int currBegin=currElement[0];
            int currEnd=currElement[1];
            int nextBegin=i[0];
            int nextEnd=i[1];
            
            if(currEnd>=nextBegin)
            {
                currElement[1]= Math.max(currEnd,nextEnd);
            }
            else
            {
                currElement=i;
                outputArr.add(currElement);
                
            }
        }
        
        return outputArr.toArray(new int[outputArr.size()][]);
    }
}
